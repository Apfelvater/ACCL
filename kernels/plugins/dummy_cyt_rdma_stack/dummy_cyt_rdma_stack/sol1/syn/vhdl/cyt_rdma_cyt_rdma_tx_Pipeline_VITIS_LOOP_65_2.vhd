-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cyt_rdma_cyt_rdma_tx_Pipeline_VITIS_LOOP_65_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    send_data_TVALID : IN STD_LOGIC;
    tx_TREADY : IN STD_LOGIC;
    send_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    send_data_TREADY : OUT STD_LOGIC;
    send_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    send_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    send_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    send_data_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
    tx_word_dest_V : IN STD_LOGIC_VECTOR (7 downto 0);
    tx_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    tx_TVALID : OUT STD_LOGIC;
    tx_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    tx_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    tx_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_TDEST : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_strb_V_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    tmp_strb_V_out_ap_vld : OUT STD_LOGIC;
    i_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cyt_rdma_cyt_rdma_tx_Pipeline_VITIS_LOOP_65_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FC0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111111000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal or_ln65_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal send_data_TDATA_blk_n : STD_LOGIC;
    signal tx_TDATA_blk_n : STD_LOGIC;
    signal i_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_182_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln65_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_155 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cyt_rdma_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cyt_rdma_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_155)) then
                if ((or_ln65_fu_198_p2 = ap_const_lv1_0)) then 
                    i_fu_76 <= i_3_fu_175_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(send_data_TVALID, tx_TREADY, ap_start_int)
    begin
        if (((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(send_data_TVALID, tx_TREADY, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0));
    end process;


    ap_condition_155_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, ap_start_int)
    begin
                ap_condition_155 <= (not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, or_ln65_fu_198_p2, ap_start_int)
    begin
        if ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (or_ln65_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, ap_start_int)
    begin
        if ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_76, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_76;
        end if; 
    end process;

    i_1_out <= i_3_fu_175_p2;

    i_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, or_ln65_fu_198_p2, ap_start_int)
    begin
        if ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (or_ln65_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_1_out_ap_vld <= ap_const_logic_1;
        else 
            i_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_175_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv32_40));
    icmp_ln65_fu_192_p2 <= "0" when (tmp_fu_182_p4 = ap_const_lv20_0) else "1";
    icmp_ln69_fu_162_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv32_FC0) else "0";
    or_ln65_fu_198_p2 <= (tmp_last_V_1_fu_168_p2 or icmp_ln65_fu_192_p2);

    send_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            send_data_TDATA_blk_n <= send_data_TVALID;
        else 
            send_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    send_data_TREADY_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, ap_start_int)
    begin
        if ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            send_data_TREADY <= ap_const_logic_1;
        else 
            send_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_182_p4 <= i_3_fu_175_p2(31 downto 12);
    tmp_last_V_1_fu_168_p2 <= (send_data_TLAST or icmp_ln69_fu_162_p2);
    tmp_strb_V_out <= send_data_TSTRB;

    tmp_strb_V_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, or_ln65_fu_198_p2, ap_start_int)
    begin
        if ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (or_ln65_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp_strb_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_strb_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tx_TDATA <= send_data_TDATA;

    tx_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, tx_TREADY, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            tx_TDATA_blk_n <= tx_TREADY;
        else 
            tx_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tx_TDEST <= tx_word_dest_V;
    tx_TKEEP <= send_data_TKEEP;
    tx_TLAST <= tmp_last_V_1_fu_168_p2;
    tx_TSTRB <= send_data_TSTRB;

    tx_TVALID_assign_proc : process(ap_CS_fsm_state1, send_data_TVALID, tx_TREADY, ap_start_int)
    begin
        if ((not(((tx_TREADY = ap_const_logic_0) or (send_data_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tx_TVALID <= ap_const_logic_1;
        else 
            tx_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
