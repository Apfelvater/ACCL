// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cyt_rdma_cyt_rdma_tx_Pipeline_VITIS_LOOP_65_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        send_data_TVALID,
        tx_TREADY,
        send_data_TDATA,
        send_data_TREADY,
        send_data_TKEEP,
        send_data_TSTRB,
        send_data_TLAST,
        send_data_TDEST,
        tx_word_dest_V,
        tx_TDATA,
        tx_TVALID,
        tx_TKEEP,
        tx_TSTRB,
        tx_TLAST,
        tx_TDEST,
        tmp_strb_V_out,
        tmp_strb_V_out_ap_vld,
        i_1_out,
        i_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   send_data_TVALID;
input   tx_TREADY;
input  [511:0] send_data_TDATA;
output   send_data_TREADY;
input  [63:0] send_data_TKEEP;
input  [63:0] send_data_TSTRB;
input  [0:0] send_data_TLAST;
input  [7:0] send_data_TDEST;
input  [7:0] tx_word_dest_V;
output  [511:0] tx_TDATA;
output   tx_TVALID;
output  [63:0] tx_TKEEP;
output  [63:0] tx_TSTRB;
output  [0:0] tx_TLAST;
output  [7:0] tx_TDEST;
output  [63:0] tmp_strb_V_out;
output   tmp_strb_V_out_ap_vld;
output  [31:0] i_1_out;
output   i_1_out_ap_vld;

reg ap_idle;
reg send_data_TREADY;
reg tx_TVALID;
reg tmp_strb_V_out_ap_vld;
reg i_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] or_ln65_fu_198_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    send_data_TDATA_blk_n;
reg    tx_TDATA_blk_n;
reg   [31:0] i_fu_76;
wire   [31:0] i_3_fu_175_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_i_2;
wire   [0:0] tmp_last_V_1_fu_168_p2;
wire   [0:0] icmp_ln69_fu_162_p2;
wire   [19:0] tmp_fu_182_p4;
wire   [0:0] icmp_ln65_fu_192_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_155;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

cyt_rdma_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_155)) begin
        if ((or_ln65_fu_198_p2 == 1'd0)) begin
            i_fu_76 <= i_3_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 32'd0;
        end
    end
end

always @ (*) begin
    if (((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (or_ln65_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_76;
    end
end

always @ (*) begin
    if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (or_ln65_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_out_ap_vld = 1'b1;
    end else begin
        i_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        send_data_TDATA_blk_n = send_data_TVALID;
    end else begin
        send_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        send_data_TREADY = 1'b1;
    end else begin
        send_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (or_ln65_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_strb_V_out_ap_vld = 1'b1;
    end else begin
        tmp_strb_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        tx_TDATA_blk_n = tx_TREADY;
    end else begin
        tx_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tx_TVALID = 1'b1;
    end else begin
        tx_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_condition_155 = (~((tx_TREADY == 1'b0) | (send_data_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_1_out = i_3_fu_175_p2;

assign i_3_fu_175_p2 = (ap_sig_allocacmp_i_2 + 32'd64);

assign icmp_ln65_fu_192_p2 = ((tmp_fu_182_p4 != 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_162_p2 = ((ap_sig_allocacmp_i_2 == 32'd4032) ? 1'b1 : 1'b0);

assign or_ln65_fu_198_p2 = (tmp_last_V_1_fu_168_p2 | icmp_ln65_fu_192_p2);

assign tmp_fu_182_p4 = {{i_3_fu_175_p2[31:12]}};

assign tmp_last_V_1_fu_168_p2 = (send_data_TLAST | icmp_ln69_fu_162_p2);

assign tmp_strb_V_out = send_data_TSTRB;

assign tx_TDATA = send_data_TDATA;

assign tx_TDEST = tx_word_dest_V;

assign tx_TKEEP = send_data_TKEEP;

assign tx_TLAST = tmp_last_V_1_fu_168_p2;

assign tx_TSTRB = send_data_TSTRB;

endmodule //cyt_rdma_cyt_rdma_tx_Pipeline_VITIS_LOOP_65_2
