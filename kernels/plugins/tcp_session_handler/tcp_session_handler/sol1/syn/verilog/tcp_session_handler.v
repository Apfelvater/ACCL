// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tcp_session_handler_tcp_session_handler,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=250,HLS_SYN_LUT=441,HLS_VERSION=2022_2}" *)

module tcp_session_handler (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        listen_port_TDATA,
        listen_port_TVALID,
        listen_port_TREADY,
        listen_port_TKEEP,
        listen_port_TSTRB,
        listen_port_TLAST,
        port_status_TDATA,
        port_status_TVALID,
        port_status_TREADY,
        port_status_TKEEP,
        port_status_TSTRB,
        port_status_TLAST,
        open_connection_TDATA,
        open_connection_TVALID,
        open_connection_TREADY,
        open_connection_TKEEP,
        open_connection_TSTRB,
        open_connection_TLAST,
        close_connection_TDATA,
        close_connection_TVALID,
        close_connection_TREADY,
        close_connection_TKEEP,
        close_connection_TSTRB,
        close_connection_TLAST,
        open_status_TDATA,
        open_status_TVALID,
        open_status_TREADY,
        open_status_TKEEP,
        open_status_TSTRB,
        open_status_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter    ap_const_lv64_0 = 64'd0;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] listen_port_TDATA;
output   listen_port_TVALID;
input   listen_port_TREADY;
output  [1:0] listen_port_TKEEP;
output  [1:0] listen_port_TSTRB;
output  [0:0] listen_port_TLAST;
input  [7:0] port_status_TDATA;
input   port_status_TVALID;
output   port_status_TREADY;
input  [0:0] port_status_TKEEP;
input  [0:0] port_status_TSTRB;
input  [0:0] port_status_TLAST;
output  [63:0] open_connection_TDATA;
output   open_connection_TVALID;
input   open_connection_TREADY;
output  [7:0] open_connection_TKEEP;
output  [7:0] open_connection_TSTRB;
output  [0:0] open_connection_TLAST;
output  [15:0] close_connection_TDATA;
output   close_connection_TVALID;
input   close_connection_TREADY;
output  [1:0] close_connection_TKEEP;
output  [1:0] close_connection_TSTRB;
output  [0:0] close_connection_TLAST;
input  [127:0] open_status_TDATA;
input   open_status_TVALID;
output   open_status_TREADY;
input  [15:0] open_status_TKEEP;
input  [15:0] open_status_TSTRB;
input  [0:0] open_status_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] ip;
wire   [31:0] port_nr;
wire    close;
wire   [31:0] session_id_i;
reg   [31:0] session_id_o;
reg    session_id_o_ap_vld;
reg    success;
reg    success_ap_vld;
reg    listen_port_TDATA_blk_n;
wire   [0:0] close_read_read_fu_140_p2;
wire    ap_CS_fsm_state2;
reg    port_status_TDATA_blk_n;
reg    open_connection_TDATA_blk_n;
reg   [0:0] icmp_ln901_reg_350;
wire    ap_CS_fsm_state3;
reg   [0:0] close_read_reg_335;
reg    close_connection_TDATA_blk_n;
wire    ap_CS_fsm_state4;
reg    open_status_TDATA_blk_n;
reg   [31:0] ip_read_reg_339;
wire   [15:0] tmp_fu_259_p1;
reg   [15:0] tmp_reg_344;
wire   [0:0] icmp_ln901_fu_275_p2;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire   [0:0] icmp_ln50_fu_268_p2;
wire   [0:0] icmp_ln63_fu_328_p2;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [31:0] zext_ln62_fu_313_p1;
wire   [47:0] tmp_3_fu_286_p3;
wire   [15:0] trunc_ln668_fu_309_p1;
wire   [7:0] tmp_s_fu_318_p4;
reg    ap_predicate_op78_write_state3;
wire    regslice_both_listen_port_V_data_V_U_apdone_blk;
wire    regslice_both_open_connection_V_data_V_U_apdone_blk;
wire    regslice_both_close_connection_V_data_V_U_apdone_blk;
reg    ap_block_state3;
reg    ap_block_state3_io;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [15:0] listen_port_TDATA_int_regslice;
reg    listen_port_TVALID_int_regslice;
wire    listen_port_TREADY_int_regslice;
wire    regslice_both_listen_port_V_data_V_U_vld_out;
wire    regslice_both_listen_port_V_keep_V_U_apdone_blk;
wire    regslice_both_listen_port_V_keep_V_U_ack_in_dummy;
wire    regslice_both_listen_port_V_keep_V_U_vld_out;
wire    regslice_both_listen_port_V_strb_V_U_apdone_blk;
wire    regslice_both_listen_port_V_strb_V_U_ack_in_dummy;
wire    regslice_both_listen_port_V_strb_V_U_vld_out;
wire    regslice_both_listen_port_V_last_V_U_apdone_blk;
wire    regslice_both_listen_port_V_last_V_U_ack_in_dummy;
wire    regslice_both_listen_port_V_last_V_U_vld_out;
wire    regslice_both_port_status_V_data_V_U_apdone_blk;
wire   [7:0] port_status_TDATA_int_regslice;
wire    port_status_TVALID_int_regslice;
reg    port_status_TREADY_int_regslice;
wire    regslice_both_port_status_V_data_V_U_ack_in;
wire    regslice_both_port_status_V_keep_V_U_apdone_blk;
wire   [0:0] port_status_TKEEP_int_regslice;
wire    regslice_both_port_status_V_keep_V_U_vld_out;
wire    regslice_both_port_status_V_keep_V_U_ack_in;
wire    regslice_both_port_status_V_strb_V_U_apdone_blk;
wire   [0:0] port_status_TSTRB_int_regslice;
wire    regslice_both_port_status_V_strb_V_U_vld_out;
wire    regslice_both_port_status_V_strb_V_U_ack_in;
wire    regslice_both_port_status_V_last_V_U_apdone_blk;
wire   [0:0] port_status_TLAST_int_regslice;
wire    regslice_both_port_status_V_last_V_U_vld_out;
wire    regslice_both_port_status_V_last_V_U_ack_in;
wire   [63:0] open_connection_TDATA_int_regslice;
reg    open_connection_TVALID_int_regslice;
wire    open_connection_TREADY_int_regslice;
wire    regslice_both_open_connection_V_data_V_U_vld_out;
wire    regslice_both_open_connection_V_keep_V_U_apdone_blk;
wire    regslice_both_open_connection_V_keep_V_U_ack_in_dummy;
wire    regslice_both_open_connection_V_keep_V_U_vld_out;
wire    regslice_both_open_connection_V_strb_V_U_apdone_blk;
wire    regslice_both_open_connection_V_strb_V_U_ack_in_dummy;
wire    regslice_both_open_connection_V_strb_V_U_vld_out;
wire    regslice_both_open_connection_V_last_V_U_apdone_blk;
wire    regslice_both_open_connection_V_last_V_U_ack_in_dummy;
wire    regslice_both_open_connection_V_last_V_U_vld_out;
wire   [15:0] close_connection_TDATA_int_regslice;
reg    close_connection_TVALID_int_regslice;
wire    close_connection_TREADY_int_regslice;
wire    regslice_both_close_connection_V_data_V_U_vld_out;
wire    regslice_both_close_connection_V_keep_V_U_apdone_blk;
wire    regslice_both_close_connection_V_keep_V_U_ack_in_dummy;
wire    regslice_both_close_connection_V_keep_V_U_vld_out;
wire    regslice_both_close_connection_V_strb_V_U_apdone_blk;
wire    regslice_both_close_connection_V_strb_V_U_ack_in_dummy;
wire    regslice_both_close_connection_V_strb_V_U_vld_out;
wire    regslice_both_close_connection_V_last_V_U_apdone_blk;
wire    regslice_both_close_connection_V_last_V_U_ack_in_dummy;
wire    regslice_both_close_connection_V_last_V_U_vld_out;
wire    regslice_both_open_status_V_data_V_U_apdone_blk;
wire   [127:0] open_status_TDATA_int_regslice;
wire    open_status_TVALID_int_regslice;
reg    open_status_TREADY_int_regslice;
wire    regslice_both_open_status_V_data_V_U_ack_in;
wire    regslice_both_open_status_V_keep_V_U_apdone_blk;
wire   [15:0] open_status_TKEEP_int_regslice;
wire    regslice_both_open_status_V_keep_V_U_vld_out;
wire    regslice_both_open_status_V_keep_V_U_ack_in;
wire    regslice_both_open_status_V_strb_V_U_apdone_blk;
wire   [15:0] open_status_TSTRB_int_regslice;
wire    regslice_both_open_status_V_strb_V_U_vld_out;
wire    regslice_both_open_status_V_strb_V_U_ack_in;
wire    regslice_both_open_status_V_last_V_U_apdone_blk;
wire   [0:0] open_status_TLAST_int_regslice;
wire    regslice_both_open_status_V_last_V_U_vld_out;
wire    regslice_both_open_status_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

tcp_session_handler_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ip(ip),
    .port_nr(port_nr),
    .close(close),
    .session_id_o(session_id_o),
    .session_id_o_ap_vld(session_id_o_ap_vld),
    .session_id_i(session_id_i),
    .success(success),
    .success_ap_vld(success_ap_vld)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 16 ))
regslice_both_listen_port_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(listen_port_TDATA_int_regslice),
    .vld_in(listen_port_TVALID_int_regslice),
    .ack_in(listen_port_TREADY_int_regslice),
    .data_out(listen_port_TDATA),
    .vld_out(regslice_both_listen_port_V_data_V_U_vld_out),
    .ack_out(listen_port_TREADY),
    .apdone_blk(regslice_both_listen_port_V_data_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 2 ))
regslice_both_listen_port_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(listen_port_TVALID_int_regslice),
    .ack_in(regslice_both_listen_port_V_keep_V_U_ack_in_dummy),
    .data_out(listen_port_TKEEP),
    .vld_out(regslice_both_listen_port_V_keep_V_U_vld_out),
    .ack_out(listen_port_TREADY),
    .apdone_blk(regslice_both_listen_port_V_keep_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 2 ))
regslice_both_listen_port_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(listen_port_TVALID_int_regslice),
    .ack_in(regslice_both_listen_port_V_strb_V_U_ack_in_dummy),
    .data_out(listen_port_TSTRB),
    .vld_out(regslice_both_listen_port_V_strb_V_U_vld_out),
    .ack_out(listen_port_TREADY),
    .apdone_blk(regslice_both_listen_port_V_strb_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_listen_port_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(listen_port_TVALID_int_regslice),
    .ack_in(regslice_both_listen_port_V_last_V_U_ack_in_dummy),
    .data_out(listen_port_TLAST),
    .vld_out(regslice_both_listen_port_V_last_V_U_vld_out),
    .ack_out(listen_port_TREADY),
    .apdone_blk(regslice_both_listen_port_V_last_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 8 ))
regslice_both_port_status_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(port_status_TDATA),
    .vld_in(port_status_TVALID),
    .ack_in(regslice_both_port_status_V_data_V_U_ack_in),
    .data_out(port_status_TDATA_int_regslice),
    .vld_out(port_status_TVALID_int_regslice),
    .ack_out(port_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_port_status_V_data_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_port_status_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(port_status_TKEEP),
    .vld_in(port_status_TVALID),
    .ack_in(regslice_both_port_status_V_keep_V_U_ack_in),
    .data_out(port_status_TKEEP_int_regslice),
    .vld_out(regslice_both_port_status_V_keep_V_U_vld_out),
    .ack_out(port_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_port_status_V_keep_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_port_status_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(port_status_TSTRB),
    .vld_in(port_status_TVALID),
    .ack_in(regslice_both_port_status_V_strb_V_U_ack_in),
    .data_out(port_status_TSTRB_int_regslice),
    .vld_out(regslice_both_port_status_V_strb_V_U_vld_out),
    .ack_out(port_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_port_status_V_strb_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_port_status_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(port_status_TLAST),
    .vld_in(port_status_TVALID),
    .ack_in(regslice_both_port_status_V_last_V_U_ack_in),
    .data_out(port_status_TLAST_int_regslice),
    .vld_out(regslice_both_port_status_V_last_V_U_vld_out),
    .ack_out(port_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_port_status_V_last_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 64 ))
regslice_both_open_connection_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(open_connection_TDATA_int_regslice),
    .vld_in(open_connection_TVALID_int_regslice),
    .ack_in(open_connection_TREADY_int_regslice),
    .data_out(open_connection_TDATA),
    .vld_out(regslice_both_open_connection_V_data_V_U_vld_out),
    .ack_out(open_connection_TREADY),
    .apdone_blk(regslice_both_open_connection_V_data_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 8 ))
regslice_both_open_connection_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(open_connection_TVALID_int_regslice),
    .ack_in(regslice_both_open_connection_V_keep_V_U_ack_in_dummy),
    .data_out(open_connection_TKEEP),
    .vld_out(regslice_both_open_connection_V_keep_V_U_vld_out),
    .ack_out(open_connection_TREADY),
    .apdone_blk(regslice_both_open_connection_V_keep_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 8 ))
regslice_both_open_connection_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(open_connection_TVALID_int_regslice),
    .ack_in(regslice_both_open_connection_V_strb_V_U_ack_in_dummy),
    .data_out(open_connection_TSTRB),
    .vld_out(regslice_both_open_connection_V_strb_V_U_vld_out),
    .ack_out(open_connection_TREADY),
    .apdone_blk(regslice_both_open_connection_V_strb_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_open_connection_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(open_connection_TVALID_int_regslice),
    .ack_in(regslice_both_open_connection_V_last_V_U_ack_in_dummy),
    .data_out(open_connection_TLAST),
    .vld_out(regslice_both_open_connection_V_last_V_U_vld_out),
    .ack_out(open_connection_TREADY),
    .apdone_blk(regslice_both_open_connection_V_last_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 16 ))
regslice_both_close_connection_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(close_connection_TDATA_int_regslice),
    .vld_in(close_connection_TVALID_int_regslice),
    .ack_in(close_connection_TREADY_int_regslice),
    .data_out(close_connection_TDATA),
    .vld_out(regslice_both_close_connection_V_data_V_U_vld_out),
    .ack_out(close_connection_TREADY),
    .apdone_blk(regslice_both_close_connection_V_data_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 2 ))
regslice_both_close_connection_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(close_connection_TVALID_int_regslice),
    .ack_in(regslice_both_close_connection_V_keep_V_U_ack_in_dummy),
    .data_out(close_connection_TKEEP),
    .vld_out(regslice_both_close_connection_V_keep_V_U_vld_out),
    .ack_out(close_connection_TREADY),
    .apdone_blk(regslice_both_close_connection_V_keep_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 2 ))
regslice_both_close_connection_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(close_connection_TVALID_int_regslice),
    .ack_in(regslice_both_close_connection_V_strb_V_U_ack_in_dummy),
    .data_out(close_connection_TSTRB),
    .vld_out(regslice_both_close_connection_V_strb_V_U_vld_out),
    .ack_out(close_connection_TREADY),
    .apdone_blk(regslice_both_close_connection_V_strb_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_close_connection_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(close_connection_TVALID_int_regslice),
    .ack_in(regslice_both_close_connection_V_last_V_U_ack_in_dummy),
    .data_out(close_connection_TLAST),
    .vld_out(regslice_both_close_connection_V_last_V_U_vld_out),
    .ack_out(close_connection_TREADY),
    .apdone_blk(regslice_both_close_connection_V_last_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 128 ))
regslice_both_open_status_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(open_status_TDATA),
    .vld_in(open_status_TVALID),
    .ack_in(regslice_both_open_status_V_data_V_U_ack_in),
    .data_out(open_status_TDATA_int_regslice),
    .vld_out(open_status_TVALID_int_regslice),
    .ack_out(open_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_open_status_V_data_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 16 ))
regslice_both_open_status_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(open_status_TKEEP),
    .vld_in(open_status_TVALID),
    .ack_in(regslice_both_open_status_V_keep_V_U_ack_in),
    .data_out(open_status_TKEEP_int_regslice),
    .vld_out(regslice_both_open_status_V_keep_V_U_vld_out),
    .ack_out(open_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_open_status_V_keep_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 16 ))
regslice_both_open_status_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(open_status_TSTRB),
    .vld_in(open_status_TVALID),
    .ack_in(regslice_both_open_status_V_strb_V_U_ack_in),
    .data_out(open_status_TSTRB_int_regslice),
    .vld_out(regslice_both_open_status_V_strb_V_U_vld_out),
    .ack_out(open_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_open_status_V_strb_V_U_apdone_blk)
);

tcp_session_handler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_open_status_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(open_status_TLAST),
    .vld_in(open_status_TVALID),
    .ack_in(regslice_both_open_status_V_last_V_U_ack_in),
    .data_out(open_status_TLAST_int_regslice),
    .vld_out(regslice_both_open_status_V_last_V_U_vld_out),
    .ack_out(open_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_open_status_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        close_read_reg_335 <= close;
        ip_read_reg_339 <= ip;
    end
end

always @ (posedge ap_clk) begin
    if (((close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln901_reg_350 <= icmp_ln901_fu_275_p2;
        tmp_reg_344 <= tmp_fu_259_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((listen_port_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_close_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_open_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_listen_port_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((open_connection_TREADY_int_regslice == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1)))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((close_connection_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_close_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_open_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_listen_port_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((open_connection_TREADY_int_regslice == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_close_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_open_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_listen_port_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((open_connection_TREADY_int_regslice == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((close_read_read_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        close_connection_TDATA_blk_n = close_connection_TREADY_int_regslice;
    end else begin
        close_connection_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0))) & (close_read_read_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        close_connection_TVALID_int_regslice = 1'b1;
    end else begin
        close_connection_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        listen_port_TDATA_blk_n = listen_port_TREADY_int_regslice;
    end else begin
        listen_port_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0))) & (close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        listen_port_TVALID_int_regslice = 1'b1;
    end else begin
        listen_port_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((close_read_reg_335 == 1'd0) & (icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        open_connection_TDATA_blk_n = open_connection_TREADY_int_regslice;
    end else begin
        open_connection_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((listen_port_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0))) & (icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        open_connection_TVALID_int_regslice = 1'b1;
    end else begin
        open_connection_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        open_status_TDATA_blk_n = open_status_TVALID_int_regslice;
    end else begin
        open_status_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((listen_port_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0))) & (icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        open_status_TREADY_int_regslice = 1'b1;
    end else begin
        open_status_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        port_status_TDATA_blk_n = port_status_TVALID_int_regslice;
    end else begin
        port_status_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0))) & (close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        port_status_TREADY_int_regslice = 1'b1;
    end else begin
        port_status_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((listen_port_TREADY_int_regslice == 1'b0) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0))) & (icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        session_id_o = zext_ln62_fu_313_p1;
    end else begin
        session_id_o = session_id_i;
    end
end

always @ (*) begin
    if ((~((listen_port_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0))) & (icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        session_id_o_ap_vld = 1'b1;
    end else begin
        session_id_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((listen_port_TREADY_int_regslice == 1'b0) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0))) & (icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        success = icmp_ln63_fu_328_p2;
    end else if ((~((ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0))) & (close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        success = icmp_ln50_fu_268_p2;
    end else begin
        success = 'bx;
    end
end

always @ (*) begin
    if (((~((listen_port_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0))) & (icmp_ln901_reg_350 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0))) & (close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        success_ap_vld = 1'b1;
    end else begin
        success_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0))) & (close_read_read_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0))) & (close_read_read_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((listen_port_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((regslice_both_close_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_open_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_listen_port_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((open_connection_TREADY_int_regslice == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((close_connection_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (port_status_TVALID_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1_io = (((close_read_read_fu_140_p2 == 1'd1) & (close_connection_TREADY_int_regslice == 1'b0)) | ((close_read_read_fu_140_p2 == 1'd0) & (listen_port_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((listen_port_TREADY_int_regslice == 1'b0) | ((icmp_ln901_reg_350 == 1'd0) & (open_status_TVALID_int_regslice == 1'b0)) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((listen_port_TREADY_int_regslice == 1'b0) | ((icmp_ln901_reg_350 == 1'd0) & (open_connection_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3 = ((regslice_both_close_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_open_connection_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_listen_port_V_data_V_U_apdone_blk == 1'b1) | ((open_connection_TREADY_int_regslice == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = ((open_connection_TREADY_int_regslice == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1));
end

always @ (*) begin
    ap_predicate_op78_write_state3 = ((close_read_reg_335 == 1'd0) & (icmp_ln901_reg_350 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign close_connection_TDATA_int_regslice = session_id_i[15:0];

assign close_connection_TVALID = regslice_both_close_connection_V_data_V_U_vld_out;

assign close_read_read_fu_140_p2 = close;

assign icmp_ln50_fu_268_p2 = ((port_status_TDATA_int_regslice != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_328_p2 = ((tmp_s_fu_318_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln901_fu_275_p2 = ((port_status_TDATA_int_regslice == 8'd0) ? 1'b1 : 1'b0);

assign listen_port_TDATA_int_regslice = port_nr[15:0];

assign listen_port_TVALID = regslice_both_listen_port_V_data_V_U_vld_out;

assign open_connection_TDATA_int_regslice = {{ap_const_lv64_0[63:48]}, {tmp_3_fu_286_p3}};

assign open_connection_TVALID = regslice_both_open_connection_V_data_V_U_vld_out;

assign open_status_TREADY = regslice_both_open_status_V_data_V_U_ack_in;

assign port_status_TREADY = regslice_both_port_status_V_data_V_U_ack_in;

assign tmp_3_fu_286_p3 = {{tmp_reg_344}, {ip_read_reg_339}};

assign tmp_fu_259_p1 = port_nr[15:0];

assign tmp_s_fu_318_p4 = {{open_status_TDATA_int_regslice[23:16]}};

assign trunc_ln668_fu_309_p1 = open_status_TDATA_int_regslice[15:0];

assign zext_ln62_fu_313_p1 = trunc_ln668_fu_309_p1;

endmodule //tcp_session_handler
