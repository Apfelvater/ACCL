-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tcp_session_handler is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    listen_port_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    listen_port_TVALID : OUT STD_LOGIC;
    listen_port_TREADY : IN STD_LOGIC;
    listen_port_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    listen_port_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    listen_port_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    port_status_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    port_status_TVALID : IN STD_LOGIC;
    port_status_TREADY : OUT STD_LOGIC;
    port_status_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    port_status_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    port_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    open_connection_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    open_connection_TVALID : OUT STD_LOGIC;
    open_connection_TREADY : IN STD_LOGIC;
    open_connection_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    open_connection_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    open_connection_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    close_connection_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    close_connection_TVALID : OUT STD_LOGIC;
    close_connection_TREADY : IN STD_LOGIC;
    close_connection_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    close_connection_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    close_connection_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    open_status_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    open_status_TVALID : IN STD_LOGIC;
    open_status_TREADY : OUT STD_LOGIC;
    open_status_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    open_status_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    open_status_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of tcp_session_handler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "tcp_session_handler_tcp_session_handler,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=250,HLS_SYN_LUT=441,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ip : STD_LOGIC_VECTOR (31 downto 0);
    signal port_nr : STD_LOGIC_VECTOR (31 downto 0);
    signal close : STD_LOGIC;
    signal session_id_i : STD_LOGIC_VECTOR (31 downto 0);
    signal session_id_o : STD_LOGIC_VECTOR (31 downto 0);
    signal session_id_o_ap_vld : STD_LOGIC;
    signal success : STD_LOGIC;
    signal success_ap_vld : STD_LOGIC;
    signal listen_port_TDATA_blk_n : STD_LOGIC;
    signal close_read_read_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal port_status_TDATA_blk_n : STD_LOGIC;
    signal open_connection_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln901_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal close_read_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal close_connection_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal open_status_TDATA_blk_n : STD_LOGIC;
    signal ip_read_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_259_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln901_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal icmp_ln50_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal zext_ln62_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_286_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln668_fu_309_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_318_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op78_write_state3 : BOOLEAN;
    signal regslice_both_listen_port_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_open_connection_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_close_connection_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal listen_port_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal listen_port_TVALID_int_regslice : STD_LOGIC;
    signal listen_port_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_listen_port_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_listen_port_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_listen_port_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_listen_port_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_listen_port_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_listen_port_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_listen_port_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_listen_port_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_listen_port_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_listen_port_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_port_status_V_data_V_U_apdone_blk : STD_LOGIC;
    signal port_status_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal port_status_TVALID_int_regslice : STD_LOGIC;
    signal port_status_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_port_status_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_port_status_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal port_status_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_port_status_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_port_status_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_port_status_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal port_status_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_port_status_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_port_status_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_port_status_V_last_V_U_apdone_blk : STD_LOGIC;
    signal port_status_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_port_status_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_port_status_V_last_V_U_ack_in : STD_LOGIC;
    signal open_connection_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal open_connection_TVALID_int_regslice : STD_LOGIC;
    signal open_connection_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_open_connection_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_open_connection_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_open_connection_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_open_connection_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_open_connection_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_open_connection_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_open_connection_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_open_connection_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_open_connection_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_open_connection_V_last_V_U_vld_out : STD_LOGIC;
    signal close_connection_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal close_connection_TVALID_int_regslice : STD_LOGIC;
    signal close_connection_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_close_connection_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_close_connection_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_close_connection_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_close_connection_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_close_connection_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_close_connection_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_close_connection_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_close_connection_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_close_connection_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_close_connection_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_open_status_V_data_V_U_apdone_blk : STD_LOGIC;
    signal open_status_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal open_status_TVALID_int_regslice : STD_LOGIC;
    signal open_status_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_open_status_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_open_status_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal open_status_TKEEP_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_open_status_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_open_status_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_open_status_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal open_status_TSTRB_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_open_status_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_open_status_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_open_status_V_last_V_U_apdone_blk : STD_LOGIC;
    signal open_status_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_open_status_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_open_status_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tcp_session_handler_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ip : OUT STD_LOGIC_VECTOR (31 downto 0);
        port_nr : OUT STD_LOGIC_VECTOR (31 downto 0);
        close : OUT STD_LOGIC;
        session_id_o : IN STD_LOGIC_VECTOR (31 downto 0);
        session_id_o_ap_vld : IN STD_LOGIC;
        session_id_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        success : IN STD_LOGIC;
        success_ap_vld : IN STD_LOGIC );
    end component;


    component tcp_session_handler_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component tcp_session_handler_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ip => ip,
        port_nr => port_nr,
        close => close,
        session_id_o => session_id_o,
        session_id_o_ap_vld => session_id_o_ap_vld,
        session_id_i => session_id_i,
        success => success,
        success_ap_vld => success_ap_vld);

    regslice_both_listen_port_V_data_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => listen_port_TDATA_int_regslice,
        vld_in => listen_port_TVALID_int_regslice,
        ack_in => listen_port_TREADY_int_regslice,
        data_out => listen_port_TDATA,
        vld_out => regslice_both_listen_port_V_data_V_U_vld_out,
        ack_out => listen_port_TREADY,
        apdone_blk => regslice_both_listen_port_V_data_V_U_apdone_blk);

    regslice_both_listen_port_V_keep_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_0,
        vld_in => listen_port_TVALID_int_regslice,
        ack_in => regslice_both_listen_port_V_keep_V_U_ack_in_dummy,
        data_out => listen_port_TKEEP,
        vld_out => regslice_both_listen_port_V_keep_V_U_vld_out,
        ack_out => listen_port_TREADY,
        apdone_blk => regslice_both_listen_port_V_keep_V_U_apdone_blk);

    regslice_both_listen_port_V_strb_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_0,
        vld_in => listen_port_TVALID_int_regslice,
        ack_in => regslice_both_listen_port_V_strb_V_U_ack_in_dummy,
        data_out => listen_port_TSTRB,
        vld_out => regslice_both_listen_port_V_strb_V_U_vld_out,
        ack_out => listen_port_TREADY,
        apdone_blk => regslice_both_listen_port_V_strb_V_U_apdone_blk);

    regslice_both_listen_port_V_last_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => listen_port_TVALID_int_regslice,
        ack_in => regslice_both_listen_port_V_last_V_U_ack_in_dummy,
        data_out => listen_port_TLAST,
        vld_out => regslice_both_listen_port_V_last_V_U_vld_out,
        ack_out => listen_port_TREADY,
        apdone_blk => regslice_both_listen_port_V_last_V_U_apdone_blk);

    regslice_both_port_status_V_data_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => port_status_TDATA,
        vld_in => port_status_TVALID,
        ack_in => regslice_both_port_status_V_data_V_U_ack_in,
        data_out => port_status_TDATA_int_regslice,
        vld_out => port_status_TVALID_int_regslice,
        ack_out => port_status_TREADY_int_regslice,
        apdone_blk => regslice_both_port_status_V_data_V_U_apdone_blk);

    regslice_both_port_status_V_keep_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => port_status_TKEEP,
        vld_in => port_status_TVALID,
        ack_in => regslice_both_port_status_V_keep_V_U_ack_in,
        data_out => port_status_TKEEP_int_regslice,
        vld_out => regslice_both_port_status_V_keep_V_U_vld_out,
        ack_out => port_status_TREADY_int_regslice,
        apdone_blk => regslice_both_port_status_V_keep_V_U_apdone_blk);

    regslice_both_port_status_V_strb_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => port_status_TSTRB,
        vld_in => port_status_TVALID,
        ack_in => regslice_both_port_status_V_strb_V_U_ack_in,
        data_out => port_status_TSTRB_int_regslice,
        vld_out => regslice_both_port_status_V_strb_V_U_vld_out,
        ack_out => port_status_TREADY_int_regslice,
        apdone_blk => regslice_both_port_status_V_strb_V_U_apdone_blk);

    regslice_both_port_status_V_last_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => port_status_TLAST,
        vld_in => port_status_TVALID,
        ack_in => regslice_both_port_status_V_last_V_U_ack_in,
        data_out => port_status_TLAST_int_regslice,
        vld_out => regslice_both_port_status_V_last_V_U_vld_out,
        ack_out => port_status_TREADY_int_regslice,
        apdone_blk => regslice_both_port_status_V_last_V_U_apdone_blk);

    regslice_both_open_connection_V_data_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => open_connection_TDATA_int_regslice,
        vld_in => open_connection_TVALID_int_regslice,
        ack_in => open_connection_TREADY_int_regslice,
        data_out => open_connection_TDATA,
        vld_out => regslice_both_open_connection_V_data_V_U_vld_out,
        ack_out => open_connection_TREADY,
        apdone_blk => regslice_both_open_connection_V_data_V_U_apdone_blk);

    regslice_both_open_connection_V_keep_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => open_connection_TVALID_int_regslice,
        ack_in => regslice_both_open_connection_V_keep_V_U_ack_in_dummy,
        data_out => open_connection_TKEEP,
        vld_out => regslice_both_open_connection_V_keep_V_U_vld_out,
        ack_out => open_connection_TREADY,
        apdone_blk => regslice_both_open_connection_V_keep_V_U_apdone_blk);

    regslice_both_open_connection_V_strb_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => open_connection_TVALID_int_regslice,
        ack_in => regslice_both_open_connection_V_strb_V_U_ack_in_dummy,
        data_out => open_connection_TSTRB,
        vld_out => regslice_both_open_connection_V_strb_V_U_vld_out,
        ack_out => open_connection_TREADY,
        apdone_blk => regslice_both_open_connection_V_strb_V_U_apdone_blk);

    regslice_both_open_connection_V_last_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => open_connection_TVALID_int_regslice,
        ack_in => regslice_both_open_connection_V_last_V_U_ack_in_dummy,
        data_out => open_connection_TLAST,
        vld_out => regslice_both_open_connection_V_last_V_U_vld_out,
        ack_out => open_connection_TREADY,
        apdone_blk => regslice_both_open_connection_V_last_V_U_apdone_blk);

    regslice_both_close_connection_V_data_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => close_connection_TDATA_int_regslice,
        vld_in => close_connection_TVALID_int_regslice,
        ack_in => close_connection_TREADY_int_regslice,
        data_out => close_connection_TDATA,
        vld_out => regslice_both_close_connection_V_data_V_U_vld_out,
        ack_out => close_connection_TREADY,
        apdone_blk => regslice_both_close_connection_V_data_V_U_apdone_blk);

    regslice_both_close_connection_V_keep_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_0,
        vld_in => close_connection_TVALID_int_regslice,
        ack_in => regslice_both_close_connection_V_keep_V_U_ack_in_dummy,
        data_out => close_connection_TKEEP,
        vld_out => regslice_both_close_connection_V_keep_V_U_vld_out,
        ack_out => close_connection_TREADY,
        apdone_blk => regslice_both_close_connection_V_keep_V_U_apdone_blk);

    regslice_both_close_connection_V_strb_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_0,
        vld_in => close_connection_TVALID_int_regslice,
        ack_in => regslice_both_close_connection_V_strb_V_U_ack_in_dummy,
        data_out => close_connection_TSTRB,
        vld_out => regslice_both_close_connection_V_strb_V_U_vld_out,
        ack_out => close_connection_TREADY,
        apdone_blk => regslice_both_close_connection_V_strb_V_U_apdone_blk);

    regslice_both_close_connection_V_last_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => close_connection_TVALID_int_regslice,
        ack_in => regslice_both_close_connection_V_last_V_U_ack_in_dummy,
        data_out => close_connection_TLAST,
        vld_out => regslice_both_close_connection_V_last_V_U_vld_out,
        ack_out => close_connection_TREADY,
        apdone_blk => regslice_both_close_connection_V_last_V_U_apdone_blk);

    regslice_both_open_status_V_data_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => open_status_TDATA,
        vld_in => open_status_TVALID,
        ack_in => regslice_both_open_status_V_data_V_U_ack_in,
        data_out => open_status_TDATA_int_regslice,
        vld_out => open_status_TVALID_int_regslice,
        ack_out => open_status_TREADY_int_regslice,
        apdone_blk => regslice_both_open_status_V_data_V_U_apdone_blk);

    regslice_both_open_status_V_keep_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => open_status_TKEEP,
        vld_in => open_status_TVALID,
        ack_in => regslice_both_open_status_V_keep_V_U_ack_in,
        data_out => open_status_TKEEP_int_regslice,
        vld_out => regslice_both_open_status_V_keep_V_U_vld_out,
        ack_out => open_status_TREADY_int_regslice,
        apdone_blk => regslice_both_open_status_V_keep_V_U_apdone_blk);

    regslice_both_open_status_V_strb_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => open_status_TSTRB,
        vld_in => open_status_TVALID,
        ack_in => regslice_both_open_status_V_strb_V_U_ack_in,
        data_out => open_status_TSTRB_int_regslice,
        vld_out => regslice_both_open_status_V_strb_V_U_vld_out,
        ack_out => open_status_TREADY_int_regslice,
        apdone_blk => regslice_both_open_status_V_strb_V_U_apdone_blk);

    regslice_both_open_status_V_last_V_U : component tcp_session_handler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => open_status_TLAST,
        vld_in => open_status_TVALID,
        ack_in => regslice_both_open_status_V_last_V_U_ack_in,
        data_out => open_status_TLAST_int_regslice,
        vld_out => regslice_both_open_status_V_last_V_U_vld_out,
        ack_out => open_status_TREADY_int_regslice,
        apdone_blk => regslice_both_open_status_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                close_read_reg_335 <= (0=>close, others=>'-');
                ip_read_reg_339 <= ip;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln901_reg_350 <= icmp_ln901_fu_275_p2;
                tmp_reg_344 <= tmp_fu_259_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_CS_fsm_state2, icmp_ln901_reg_350, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state1_io, ap_block_state2_io, ap_predicate_op78_write_state3, regslice_both_listen_port_V_data_V_U_apdone_blk, regslice_both_open_connection_V_data_V_U_apdone_blk, regslice_both_close_connection_V_data_V_U_apdone_blk, ap_block_state3_io, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, open_connection_TREADY_int_regslice, close_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) and (close_read_read_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) and (close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((listen_port_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((regslice_both_close_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_open_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_listen_port_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((open_connection_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op78_write_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((close_connection_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, close_read_read_fu_140_p2, ap_block_state1_io, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, close_connection_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(icmp_ln901_reg_350, ap_block_state2_io, listen_port_TREADY_int_regslice, open_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        if (((listen_port_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_predicate_op78_write_state3, regslice_both_listen_port_V_data_V_U_apdone_blk, regslice_both_open_connection_V_data_V_U_apdone_blk, regslice_both_close_connection_V_data_V_U_apdone_blk, ap_block_state3_io, open_connection_TREADY_int_regslice)
    begin
        if (((regslice_both_close_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_open_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_listen_port_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((open_connection_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op78_write_state3 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(close_connection_TREADY_int_regslice)
    begin
        if ((close_connection_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, close_read_read_fu_140_p2, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, close_connection_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_io_assign_proc : process(close_read_read_fu_140_p2, listen_port_TREADY_int_regslice, close_connection_TREADY_int_regslice)
    begin
                ap_block_state1_io <= (((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln901_reg_350, listen_port_TREADY_int_regslice, open_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((listen_port_TREADY_int_regslice = ap_const_logic_0) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln901_reg_350, listen_port_TREADY_int_regslice, open_connection_TREADY_int_regslice)
    begin
                ap_block_state2_io <= ((listen_port_TREADY_int_regslice = ap_const_logic_0) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_assign_proc : process(ap_predicate_op78_write_state3, regslice_both_listen_port_V_data_V_U_apdone_blk, regslice_both_open_connection_V_data_V_U_apdone_blk, regslice_both_close_connection_V_data_V_U_apdone_blk, open_connection_TREADY_int_regslice)
    begin
                ap_block_state3 <= ((regslice_both_close_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_open_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_listen_port_V_data_V_U_apdone_blk = ap_const_logic_1) or ((open_connection_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op78_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_io_assign_proc : process(ap_predicate_op78_write_state3, open_connection_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((open_connection_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op78_write_state3 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, ap_predicate_op78_write_state3, regslice_both_listen_port_V_data_V_U_apdone_blk, regslice_both_open_connection_V_data_V_U_apdone_blk, regslice_both_close_connection_V_data_V_U_apdone_blk, ap_block_state3_io, open_connection_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_close_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_open_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_listen_port_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((open_connection_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op78_write_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op78_write_state3_assign_proc : process(icmp_ln901_reg_350, close_read_reg_335)
    begin
                ap_predicate_op78_write_state3 <= ((close_read_reg_335 = ap_const_lv1_0) and (icmp_ln901_reg_350 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_predicate_op78_write_state3, regslice_both_listen_port_V_data_V_U_apdone_blk, regslice_both_open_connection_V_data_V_U_apdone_blk, regslice_both_close_connection_V_data_V_U_apdone_blk, ap_block_state3_io, open_connection_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_close_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_open_connection_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_listen_port_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((open_connection_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op78_write_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    close_connection_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_CS_fsm_state4, close_connection_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            close_connection_TDATA_blk_n <= close_connection_TREADY_int_regslice;
        else 
            close_connection_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    close_connection_TDATA_int_regslice <= session_id_i(16 - 1 downto 0);
    close_connection_TVALID <= regslice_both_close_connection_V_data_V_U_vld_out;

    close_connection_TVALID_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_block_state1_io, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, close_connection_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) and (close_read_read_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            close_connection_TVALID_int_regslice <= ap_const_logic_1;
        else 
            close_connection_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    close_read_read_fu_140_p2 <= (0=>close, others=>'-');
    icmp_ln50_fu_268_p2 <= "0" when (port_status_TDATA_int_regslice = ap_const_lv8_0) else "1";
    icmp_ln63_fu_328_p2 <= "0" when (tmp_s_fu_318_p4 = ap_const_lv8_0) else "1";
    icmp_ln901_fu_275_p2 <= "1" when (port_status_TDATA_int_regslice = ap_const_lv8_0) else "0";

    listen_port_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_CS_fsm_state2, listen_port_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            listen_port_TDATA_blk_n <= listen_port_TREADY_int_regslice;
        else 
            listen_port_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    listen_port_TDATA_int_regslice <= port_nr(16 - 1 downto 0);
    listen_port_TVALID <= regslice_both_listen_port_V_data_V_U_vld_out;

    listen_port_TVALID_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_block_state1_io, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, close_connection_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) and (close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            listen_port_TVALID_int_regslice <= ap_const_logic_1;
        else 
            listen_port_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    open_connection_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln901_reg_350, ap_CS_fsm_state3, close_read_reg_335, open_connection_TREADY_int_regslice)
    begin
        if ((((close_read_reg_335 = ap_const_lv1_0) and (icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            open_connection_TDATA_blk_n <= open_connection_TREADY_int_regslice;
        else 
            open_connection_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    open_connection_TDATA_int_regslice <= (ap_const_lv64_0(63 downto 48) & tmp_3_fu_286_p3);
    open_connection_TVALID <= regslice_both_open_connection_V_data_V_U_vld_out;

    open_connection_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln901_reg_350, ap_block_state2_io, listen_port_TREADY_int_regslice, open_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        if ((not(((listen_port_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            open_connection_TVALID_int_regslice <= ap_const_logic_1;
        else 
            open_connection_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    open_status_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln901_reg_350, open_status_TVALID_int_regslice)
    begin
        if (((icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            open_status_TDATA_blk_n <= open_status_TVALID_int_regslice;
        else 
            open_status_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    open_status_TREADY <= regslice_both_open_status_V_data_V_U_ack_in;

    open_status_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln901_reg_350, ap_block_state2_io, listen_port_TREADY_int_regslice, open_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        if ((not(((listen_port_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            open_status_TREADY_int_regslice <= ap_const_logic_1;
        else 
            open_status_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    port_status_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, port_status_TVALID_int_regslice)
    begin
        if (((close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            port_status_TDATA_blk_n <= port_status_TVALID_int_regslice;
        else 
            port_status_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    port_status_TREADY <= regslice_both_port_status_V_data_V_U_ack_in;

    port_status_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_block_state1_io, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, close_connection_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) and (close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            port_status_TREADY_int_regslice <= ap_const_logic_1;
        else 
            port_status_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    session_id_o_assign_proc : process(session_id_i, ap_CS_fsm_state2, icmp_ln901_reg_350, zext_ln62_fu_313_p1, listen_port_TREADY_int_regslice, open_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        if ((not(((listen_port_TREADY_int_regslice = ap_const_logic_0) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            session_id_o <= zext_ln62_fu_313_p1;
        else 
            session_id_o <= session_id_i;
        end if; 
    end process;


    session_id_o_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln901_reg_350, ap_block_state2_io, listen_port_TREADY_int_regslice, open_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        if ((not(((listen_port_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            session_id_o_ap_vld <= ap_const_logic_1;
        else 
            session_id_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    success_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_CS_fsm_state2, icmp_ln901_reg_350, icmp_ln50_fu_268_p2, icmp_ln63_fu_328_p2, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, open_connection_TREADY_int_regslice, close_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        if ((not(((listen_port_TREADY_int_regslice = ap_const_logic_0) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            success <= icmp_ln63_fu_328_p2(0);
        elsif ((not(((ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) and (close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            success <= icmp_ln50_fu_268_p2(0);
        else 
            success <= 'X';
        end if; 
    end process;


    success_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, close_read_read_fu_140_p2, ap_CS_fsm_state2, icmp_ln901_reg_350, ap_block_state1_io, ap_block_state2_io, listen_port_TREADY_int_regslice, port_status_TVALID_int_regslice, open_connection_TREADY_int_regslice, close_connection_TREADY_int_regslice, open_status_TVALID_int_regslice)
    begin
        if (((not(((listen_port_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_status_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln901_reg_350 = ap_const_lv1_0) and (open_connection_TREADY_int_regslice = ap_const_logic_0)))) and (icmp_ln901_reg_350 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0) or ((close_read_read_fu_140_p2 = ap_const_lv1_1) and (close_connection_TREADY_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (port_status_TVALID_int_regslice = ap_const_logic_0)) or ((close_read_read_fu_140_p2 = ap_const_lv1_0) and (listen_port_TREADY_int_regslice = ap_const_logic_0)))) and (close_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            success_ap_vld <= ap_const_logic_1;
        else 
            success_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_286_p3 <= (tmp_reg_344 & ip_read_reg_339);
    tmp_fu_259_p1 <= port_nr(16 - 1 downto 0);
    tmp_s_fu_318_p4 <= open_status_TDATA_int_regslice(23 downto 16);
    trunc_ln668_fu_309_p1 <= open_status_TDATA_int_regslice(16 - 1 downto 0);
    zext_ln62_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln668_fu_309_p1),32));
end behav;
